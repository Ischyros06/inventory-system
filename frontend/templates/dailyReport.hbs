<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Daily Report</title>
    <link rel="stylesheet" href="/dailyReport.css">
    <link href="https://fonts.googleapis.com/css?family=Roboto:400,700&display=swap" rel="stylesheet">
</head>
<body>
    <header>
        <nav class="navbar">
            <div class="brand">
                <a href="/goHomeAdmin" style="font-family: 'Roboto', sans-serif;">Stack Inventory - USER : Daily Report</a>
            </div>
            <ul class="navbar-menu">
                <li>Welcome, <strong style="color: #4C43A2;">{{user.name}}</strong></li>
                <li><a href="/aboutUser">About</a></li>
                <li><a href="/contactUser">Contact</a></li>
            </ul>
        </nav>
    </header>

    <aside>
        <ul>
            <li><img src="Casanas Suites.png" alt="Casanas Suites Logo"></li>
            <li><a href="/goHomeUser">Home</a></li>
            <li><a href="/dailyReport">Daily Report Tab</a></li>
            <li><a href="/reportView">Report Submitted</a></li>
            <li><a href="/logout">Logout</a></li>
        </ul>
    </aside>

    <main>
        <div class="container">
            <!-- Message about data deletion at midnight -->
        <div class="message">
            Note: The data shown here will be automatically deleted at midnight, so print or send it to the admin ASAP.
            <!-- Countdown timer -->
            <div class="countdown" id="countdown"></div>
        </div>

        <div class="clickButtons">
            <button onclick="window.print()">Print Report</button>
            <button onclick="openConfirmationModal()">Send Report</button>
        </div>

        <div id="confirmationModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="closeConfirmationModal()">&times;</span>
                <p>Are you sure you want to send this report?</p>
                <p>Once sent, you cannot edit it.</p>
                <p>If you send another report for today, it will update the existing one.</p>
                <div class="modal-buttons">
                    <button onclick="sendReport()">Yes</button>
                    <button onclick="closeConfirmationModal()">No</button>
                </div>
            </div>
        </div>

        <table>
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Quantity Subtracted</th>
                    <th>Unit</th>
                    <th class="options-column" >Options</th>
                </tr>
            </thead>
            <tbody>
                {{#each reportData}}
                    <tr>
                        <td>{{this.product}}</td>
                        <td>{{this.quantitySubtracted}}</td>
                        <td>{{this.unit}}</td>
                        <td class="options-column">
                            <input type="number" id="quantityInput" placeholder="Enter quantity" class="quantity-input" data-unit="{{this.unit}}" min="1">
                            <button class="undoButtons" onclick="editSubtractedQuantity('{{this.product}}', event)">âˆ’</button>
                        </td>
                    </tr>
                {{/each}}
            </tbody>
        </table>
        <p class="name-tag">Used by {{user.name}}</p>
        </div>
    </main>

    <script>
         // Function to open the confirmation modal
        function openConfirmationModal() {
            const modal = document.getElementById('confirmationModal');
            modal.style.display = 'block';
        }

        // Function to close the confirmation modal
        function closeConfirmationModal() {
            const modal = document.getElementById('confirmationModal');
            modal.style.display = 'none';
        }

        // Function to update countdown timer
        function updateCountdown() {
            // Get the current time
            const now = new Date();
            // Get midnight of the next day
            const midnight = new Date(now);
            midnight.setHours(24, 0, 0, 0);
            // Calculate time difference
            const timeDiff = midnight - now;
            // Convert time difference to hours, minutes, and seconds
            const hours = Math.floor(timeDiff / (1000 * 60 * 60));
            const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);
            // Update countdown display
            document.getElementById('countdown').innerText = `Time until data deletion: ${hours}h ${minutes}m ${seconds}s`;
        }

        // Call updateCountdown every second
        setInterval(updateCountdown, 1000);


        /* This function is to undo the accidental decrimented items and get the value back to the original item inventory*/
        function editSubtractedQuantity(productName, event) {
            const userName = '{{user.name}}';
            const quantityInput = event.target.parentNode.querySelector('.quantity-input').value; // Get the input value relative to the button
            const quantityValue = parseInt(quantityInput) || 1;

            fetch('/dailyReport/editSubtractedQuantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productName, userName, quantityValue })
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text) });
                }
                return response.json();
            })
            .then(data => {
                console.log('Success:', data);
                window.location.reload();
            })
            .catch(error => {
                console.error('Error subtracting quantity:', error.message);
                alert('An error occurred: ' + error.message);
            });
        };

        /*This function is for sending the contents of the report to the schema that stores the reports submitted to the admin*/
        function sendReport() {
            closeConfirmationModal();
            const userName = "{{user.name}}"; // Ensure that {{user.name}} is replaced with the actual user's name by your server-side templating engine
            const reportData = Array.from(document.querySelectorAll('tbody tr')).map(row => {
                return {
                    product: row.querySelector('td:nth-child(1)').textContent,
                    quantitySubtracted: parseInt(row.querySelector('td:nth-child(2)').textContent),
                    unit: row.querySelector('td:nth-child(3)').textContent
                };
            });

            fetch('/dailyReport/sendReport', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                    userName: userName, // Include the user's name
                    reportData: reportData
                    })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Show success message
                    alert('Report sent successfully');
                    // Reload the page after successfully sending the report
                    window.location.reload();
                } else {
                    // Show error message
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error sending report:', error);
                console.log(userName)
                // Handle error
            });
        };

        // Function to toggle input visibility based on unit type
        const toggleInputVisibility = () => {
            // Remove the unit parameter from the function definition
            const inputs = document.querySelectorAll('.quantity-input');
            inputs.forEach(input => {
                // Change 'document' to 'input' and fix the attribute name to 'dataset.unit'
                const unit = input.dataset.unit;
                input.style.display = unit === 'grams' || unit === 'milliliters' ? 'block' : 'none';
            });
        };

        // Call toggleInputVisibility on page load
        toggleInputVisibility();
    </script>
</body>
</html>